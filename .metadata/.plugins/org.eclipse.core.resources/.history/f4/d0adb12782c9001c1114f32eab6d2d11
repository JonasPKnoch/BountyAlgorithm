package alg;

import java.util.ArrayList;

public class BountyAlgorithm {
	private Bounty[][] startingBounties;
	private int[][] inputGrid;
	private int tileCount;
	
	private ArrayList<Bounty>[][][] bountyGrid;
	
	private void addNextBounty(Bounty bounty, int x, int y) {
		int indexX = x + bounty.offset.x;
		int indexY = y + bounty.offset.y;
		Bounty nextBounty = bounty.next;
		
		ArrayList<Bounty>[] bountyArr = bountyGrid[indexX][indexY];
		
		if(bountyArr == null) {
			bountyArr = new ArrayList[tileCount];
			bountyGrid[indexX][indexY] = bountyArr;
		}
		
		ArrayList<Bounty> targetBounties = bountyArr[nextBounty.value];
		
		if(targetBounties == null) {
			targetBounties = new ArrayList<Bounty>();
			bountyArr[nextBounty.value] = targetBounties;
		}
		
		targetBounties.add(nextBounty);
	}
	
	private boolean bountyMatch(int currentCell, int x, int y) {
		ArrayList<Bounty> targetBounties = bountyGrid[x][y][currentCell];
		
		if(targetBounties != null || startingBounties[currentCell] != null)
			return true;
		
		return false;
	}
	
	private void addNextBountiesAll(int matchCell, int x, int y) {
		ArrayList<Bounty> sourceBounties = bountyGrid[x][y][matchCell];
		
		if(sourceBounties != null) {
			for(Bounty el : sourceBounties) {
				addNextBounty(el, x, y);
			}
		}
		
		Bounty[] sourceStarters = startingBounties[matchCell];
		
		if(sourceStarters != null) {
			for(Bounty el : sourceStarters) {
				addNextBounty(el, x, y);
			}
		}
	}
	
	public void run(Bounty[][] startingBounties, int[][] inputGrid, int tileCount) {
		this.startingBounties = startingBounties;
		this.inputGrid = inputGrid;
		this.tileCount = tileCount;
		
		bountyGrid = new ArrayList[inputGrid.length][inputGrid[0].length][];
	}
}
