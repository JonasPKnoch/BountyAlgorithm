package alg;

import java.awt.Point;
import java.util.ArrayList;

public class Bounty {
	private int value;
	private int index;
	private Bounty next;
	private Point offset;
	
	private Bounty(int value, int index) {
		this.value = value;
		this.index = index;
	}
	
	public int value() {
		return value;
	}
	
	public int index() {
		return index;
	}
	
	public Bounty getNext() {
		return next;
	}
	
	public boolean hasNext() {
		return next != null;
	}
	
	public Point offset() {
		return offset;
	}
	
	public static Bounty getStarter(ArrayGrid<Integer> pattern, int empty) {
		Bounty starter = null;
		Point lastTile = null;
		Bounty last = null;
		int index = 0;
		
		for(int y = 0; y < pattern.ySize(); y++) {
			for(int x = 0; x < pattern.xSize(); x++) {
				int current = pattern.get(x, y);
				
				if(current != empty) {
					if(last == null) {
						last = new Bounty(current, index++);
						starter = last;
						lastTile = new Point(x, y);
						continue;
					}
					
					Bounty next = new Bounty(current, index++);
					last.next = next;
					last.offset = new Point(x - lastTile.x, y - lastTile.y);
					lastTile = new Point(x, y);
					last = next;
				}
			}
		}
		
		return starter;
	}
	
	public static Bounty[][] getStarters(ArrayGrid<Integer>[] patterns, int empty, int tiles) {
		ArrayList<Bounty>[] starters = new ArrayList[tiles];
		
		for(int i = 0; i < starters.length; i++) {
			starters[i] = new ArrayList<Bounty>();
		}
		
		for(ArrayGrid<Integer> pattern : patterns) {
			Bounty bounty = getStarter(pattern, empty);
			starters[bounty.value].add(bounty);
		}
		
		Bounty[][] arr = new Bounty[tiles][];
		
		for(int i = 0; i < starters.length; i++) {
			ArrayList<Bounty> el = starters[i];
			arr[i] = new Bounty[el.size()];
			
			for(int j = 0; j < el.size(); j ++) {
				arr[i][j] = el.get(j);
			}
		}
		
		return arr;
	}
	
	public static Bounty[][] getStarters(ArrayGrid<Integer> pattern, int empty, int tiles) {
		return getStarters(new ArrayGrid[] {pattern}, empty, tiles);
	}
}
